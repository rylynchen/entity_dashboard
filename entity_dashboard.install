<?php

/**
 * Implemenation of hook_schema().
 */
function entity_dashboard_schema() {
  $schema['entity_dashboard'] = array(
    'description' => 'Entity dashboard.',
    'fields' => array(
      'did' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique entity dashboard ID.',
      ),
      'title' => array(
        'description' => 'The title of this entity dashboard page, always treated as non-markup plain text.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'path' => array(
        'type' => 'varchar',
        'length' => 100,
        'not null' => TRUE,
        'description' => 'The dashboard control path.',
      ),
      'theme' => array(
        'type' => 'varchar',
        'length' => 100,
        'not null' => FALSE,
        'description' => 'The dashboard use theme.',
      ),
      'themekey_id' => array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'The dashboard use theme_key id.',
      ),
      'module' => array(
        'type' => 'varchar',
        'length' => 100,
        'not null' => TRUE,
        'description' => 'Which module create this dashboard.',
      ),
    ),
    'primary key' => array('did'),
    'indexes' => array(
      'title' => array('title'),
      'path' => array('path'),
      'module' => array('module'),
    ),
  );
  $schema['entity_dashboard_block'] = array(
    'description' => 'Entity dashboard blocks.',
        'fields' => array(
      'bid' => array(
        'description' => 'Primary Key: Unique block ID.',
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'module' => array(
        'description' => 'The module from which the block originates; for example, ’user’ for the Who’s Online block, and ’block’ for any custom blocks.',
        'type' => 'varchar',
        'length' => '64',
        'not null' => TRUE,
        'default' => '',
      ),
      'delta' => array(
        'description' => 'Unique ID for block within a module.',
        'type' => 'varchar',
        'length' => '32',
        'not null' => TRUE,
        'default' => '0',
      ),
      'theme' => array(
        'description' => 'The theme under which the block settings apply.',
        'type' => 'varchar',
        'length' => '64',
        'not null' => TRUE,
        'default' => '',
      ),
      'status' => array(
        'description' => 'Block enabled status. (1 = enabled, 0 = disabled)',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'weight' => array(
        'description' => 'Block weight within region.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'region' => array(
        'description' => 'Theme region within which the block is set.',
        'type' => 'varchar',
        'length' => '64',
        'not null' => TRUE,
        'default' => '',
      ),
      'custom' => array(
        'description' => 'Flag to indicate how users may control visibility of the block. (0 = Users cannot control, 1 = On by default, but can be hidden, 2 = Hidden by default, but can be shown)',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'visibility' => array(
        'description' => 'Flag to indicate how to show blocks on pages. (0 = Show on all pages except listed pages, 1 = Show only on listed pages, 2 = Use custom PHP code to determine visibility)',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'pages' => array(
        'description' => 'Contents of the "Pages" block; contains either a list of paths on which to include/exclude the block or PHP code, depending on "visibility" setting.',
        'type' => 'text',
        'not null' => TRUE,
      ),
      'title' => array(
        'description' => 'Custom title for the block. (Empty string will use block default title, <none> will remove the title, text will cause block to use specified title.)',
        'type' => 'varchar',
        'length' => '64',
        'not null' => TRUE,
        'default' => '',
      ),
      'cache' => array(
        'description' => 'Binary flag to indicate block cache mode. (-2: Custom cache, -1: Do not cache, 1: Cache per role, 2: Cache per user, 4: Cache per page, 8: Block cache global) See DRUPAL_CACHE_* constants in ../includes/common.inc for more detailed information.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 1,
      ),
      'did' => array(
        'type' => 'int',
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('bid'),
    'indexes' => array(
      'did' => array('did'),
    ),
  );
  return $schema;
}

/**
 * Implements hook_disable().
 *
 * Stash a list of blocks enabled on the dashboard, so they can be re-enabled
 * if the dashboard is re-enabled. Then disable those blocks, since the
 * dashboard regions will no longer be defined.
 */
function entity_dashboard_disable() {
  // Stash a list of currently enabled blocks.
  $stashed_blocks = array();
  $regions = _entity_dashboard_regions();
  if (!empty($regions)) {
    $result = db_select('block', 'b')
      ->fields('b', array('module', 'delta', 'region'))
      ->condition('b.region', $regions, 'IN')
      ->execute();

    foreach ($result as $block) {
      $stashed_blocks[] = array(
        'module' => $block->module,
        'delta' => $block->delta,
        'region' => $block->region,
      );
    }
    variable_set('entity_dashboard_stashed_blocks', $stashed_blocks);

    // Disable the dashboard blocks.
    db_update('block')
      ->fields(array(
        'status' => 0,
        'region' => BLOCK_REGION_NONE,
      ))
      ->condition('region', $regions, 'IN')
      ->execute();
  }
}

/**
 * Implements hook_enable().
 *
 * Restores blocks to the dashboard that were there when the dashboard module
 * was disabled.
 */
function entity_dashboard_enable() {
  $theme = variable_get('theme_defualt', 'none');
  if (!$stashed_blocks = variable_get('entity_dashboard_stashed_blocks')) {
    return;
  }
  if (!$admin_theme = variable_get('admin_theme')) {
    drupal_theme_initialize();
    $admin_theme = $theme;
  }
  foreach ($stashed_blocks as $block) {
    db_update('block')
      ->fields(array(
        'status' => 1,
        'region' => $block['region']
      ))
      ->condition('module', $block['module'])
      ->condition('delta', $block['delta'])
      ->condition('theme', $theme)
      ->condition('status', 0)
      ->execute();
  }
  variable_del('entity_dashboard_stashed_blocks');
}

/**
 * Implements hook_install().
 */
function entity_dashboard_install() {
  drupal_set_message(t('You need to do some '.l('Permission', 'admin/people/permissions', array('fragment' => 'module-entity_dashboard')).' and '.l('Block', 'admin/config/system/entity_dashboard').' settings.'));
}

/**
 * Implements hook_uninstall().
 */
function entity_dashboard_uninstall() {
  module_load_include('inc', 'themekey', 'themekey_base');
  module_load_include('inc', 'themekey', 'themekey_build');
  ctools_include('object-cache');
  // clear block
  $available_blocks = variable_get('entity_dashboard_available_blocks', NULL);
  if ($available_blocks && !empty($available_blocks)) {
    db_delete('block')->condition('bid', unserialize($available_blocks), 'IN')->execute();
  }
  // clear themekey
  $dashboards = db_select('entity_dashboard', 'ed')->fields('ed', array('path', 'themekey_id'))->execute()->fetchAll();
  foreach ($dashboards as $dashboard) {
    themekey_rule_del($dashboard->themekey_id);
    ctools_object_cache_clear('entity_dashboard', 'entity_dashboard_load_by_path:'.$dashboard->path);
  }
  // clear variable & cache
  variable_del('entity_dashboard_available_blocks');
  variable_del('entity_dashboard_available_themes');
  variable_del('entity_dashboard_stashed_blocks');
  cache_clear_all('entity_dashboard', 'cache', TRUE);
}